   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  21              	.Ltext0:
  22              		.file 1 "../main.c"
 1889              		.align	2
 1892              	str_send:
 1893 0000 0A534544 		.ascii	"\012SED-P4 >\000"
 1893      2D503420 
 1893      3E00
 1894              		.global	str_error
 1895 000a 0000     		.align	2
 1898              	str_error:
 1899 000c 0A536520 		.ascii	"\012Se ha producido un desbordamiento!\012\000\000"
 1899      68612070 
 1899      726F6475 
 1899      6369646F 
 1899      20756E20 
 1900 0032 00000000 		.space	12
 1900      00000000 
 1900      00000000 
 1901              		.comm	str,256,4
 1902 003e 0000     		.text
 1903              		.align	2
 1904              		.global	Main
 1906              	Main:
 1907              	.LFB0:
   1:../main.c     **** /*--- ficheros de cabecera ---*/
   2:../main.c     **** #include "44blib.h"
   3:../main.c     **** #include "44b.h"
   4:../main.c     **** #include "uart.h"
   5:../main.c     **** /*--- declaracion de funciones ---*/
   6:../main.c     **** int Main(void);
   7:../main.c     **** 
   8:../main.c     **** /*--- variables globales ---*/
   9:../main.c     **** char str_send[10] = "\nSED-P4 >\0";
  10:../main.c     **** char str_error[50] = "\nSe ha producido un desbordamiento!\n\0";
  11:../main.c     **** char str[256];
  12:../main.c     **** 
  13:../main.c     **** void initPractica();
  14:../main.c     **** 
  15:../main.c     **** /*--- codigo de la funcion ---*/
  16:../main.c     **** int Main(void){
 1908              		.loc 1 16 0
 1909              		.cfi_startproc
 1910              		@ Function supports interworking.
 1911              		@ args = 0, pretend = 0, frame = 8
 1912              		@ frame_needed = 1, uses_anonymous_args = 0
 1913 0000 0DC0A0E1 		mov	ip, sp
 1914              	.LCFI0:
 1915              		.cfi_def_cfa_register 12
 1916 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1917 0008 04B04CE2 		sub	fp, ip, #4
 1918              		.cfi_offset 14, -8
 1919              		.cfi_offset 13, -12
 1920              		.cfi_offset 11, -16
 1921              	.LCFI1:
 1922              		.cfi_def_cfa 11, 4
 1923 000c 08D04DE2 		sub	sp, sp, #8
  17:../main.c     **** 
  18:../main.c     **** 	char *pt_str = str;
 1924              		.loc 1 18 0
 1925 0010 44319FE5 		ldr	r3, .L11
 1926 0014 10300BE5 		str	r3, [fp, #-16]
  19:../main.c     **** 
  20:../main.c     **** 	sys_init(); // inicializacion de la placa, interrupciones, puertos
 1927              		.loc 1 20 0
 1928 0018 FEFFFFEB 		bl	sys_init
  21:../main.c     **** 
  22:../main.c     **** 	Uart_Init(115200); // inicializacion de la Uart
 1929              		.loc 1 22 0
 1930 001c 3C019FE5 		ldr	r0, .L11+4
 1931 0020 FEFFFFEB 		bl	Uart_Init
  23:../main.c     **** 	Uart_Config(); // configuración de interrupciones y buffers
 1932              		.loc 1 23 0
 1933 0024 FEFFFFEB 		bl	Uart_Config
  24:../main.c     **** //	Uart_Printf(str_send); // mostrar cabecera
  25:../main.c     **** 
  26:../main.c     **** 	initPractica();
 1934              		.loc 1 26 0
 1935 0028 FEFFFFEB 		bl	initPractica
  27:../main.c     **** 	Eint4567_activar();
 1936              		.loc 1 27 0
 1937 002c FEFFFFEB 		bl	Eint4567_activar
  28:../main.c     **** 	keyboard_activar();
 1938              		.loc 1 28 0
 1939 0030 FEFFFFEB 		bl	keyboard_activar
 1940              	.L10:
 1941              	.LBB2:
  29:../main.c     **** 
  30:../main.c     **** 	char c;
  31:../main.c     **** 	while(1){
  32:../main.c     **** 		c = Uart_Getch1();
 1942              		.loc 1 32 0
 1943 0034 FEFFFFEB 		bl	Uart_Getch1
 1944 0038 0030A0E1 		mov	r3, r0
 1945 003c 11304BE5 		strb	r3, [fp, #-17]
  33:../main.c     **** 		Uart_SendByte0(c);
 1946              		.loc 1 33 0
 1947 0040 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1948 0044 0300A0E1 		mov	r0, r3
 1949 0048 FEFFFFEB 		bl	Uart_SendByte0
  34:../main.c     **** 		switch(c){
 1950              		.loc 1 34 0
 1951 004c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1952 0050 303043E2 		sub	r3, r3, #48
 1953 0054 220053E3 		cmp	r3, #34
 1954 0058 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 1955 005c 2F0000EA 		b	.L2
 1956              	.L6:
 1957 0060 04010000 		.word	.L3
 1958 0064 04010000 		.word	.L3
 1959 0068 04010000 		.word	.L3
 1960 006c 04010000 		.word	.L3
 1961 0070 04010000 		.word	.L3
 1962 0074 04010000 		.word	.L3
 1963 0078 04010000 		.word	.L3
 1964 007c 04010000 		.word	.L3
 1965 0080 04010000 		.word	.L3
 1966 0084 04010000 		.word	.L3
 1967 0088 20010000 		.word	.L2
 1968 008c 20010000 		.word	.L2
 1969 0090 20010000 		.word	.L2
 1970 0094 20010000 		.word	.L2
 1971 0098 20010000 		.word	.L2
 1972 009c 20010000 		.word	.L2
 1973 00a0 20010000 		.word	.L2
 1974 00a4 04010000 		.word	.L3
 1975 00a8 04010000 		.word	.L3
 1976 00ac 04010000 		.word	.L3
 1977 00b0 04010000 		.word	.L3
 1978 00b4 04010000 		.word	.L3
 1979 00b8 04010000 		.word	.L3
 1980 00bc 20010000 		.word	.L2
 1981 00c0 20010000 		.word	.L2
 1982 00c4 20010000 		.word	.L2
 1983 00c8 20010000 		.word	.L2
 1984 00cc 20010000 		.word	.L2
 1985 00d0 EC000000 		.word	.L4
 1986 00d4 20010000 		.word	.L2
 1987 00d8 20010000 		.word	.L2
 1988 00dc 20010000 		.word	.L2
 1989 00e0 20010000 		.word	.L2
 1990 00e4 20010000 		.word	.L2
 1991 00e8 F8000000 		.word	.L5
 1992              	.L4:
 1993              	.LBB4:
  35:../main.c     **** 		case 'L':
  36:../main.c     **** 			led1_on();
 1994              		.loc 1 36 0
 1995 00ec FEFFFFEB 		bl	led1_on
  37:../main.c     **** 			led2_off();
 1996              		.loc 1 37 0
 1997 00f0 FEFFFFEB 		bl	led2_off
  38:../main.c     **** 			break;
 1998              		.loc 1 38 0
 1999 00f4 090000EA 		b	.L2
 2000              	.L5:
  39:../main.c     **** 		case 'R':
  40:../main.c     **** 			led1_off();
 2001              		.loc 1 40 0
 2002 00f8 FEFFFFEB 		bl	led1_off
  41:../main.c     **** 			led2_on();
 2003              		.loc 1 41 0
 2004 00fc FEFFFFEB 		bl	led2_on
  42:../main.c     **** 			break;
 2005              		.loc 1 42 0
 2006 0100 060000EA 		b	.L2
 2007              	.L3:
  43:../main.c     **** 		case '0':
  44:../main.c     **** 		case '1':
  45:../main.c     **** 		case '2':
  46:../main.c     **** 		case '3':
  47:../main.c     **** 		case '4':
  48:../main.c     **** 		case '5':
  49:../main.c     **** 		case '6':
  50:../main.c     **** 		case '7':
  51:../main.c     **** 		case '8':
  52:../main.c     **** 		case '9':
  53:../main.c     **** 		case 'A':
  54:../main.c     **** 		case 'B':
  55:../main.c     **** 		case 'C':
  56:../main.c     **** 		case 'D':
  57:../main.c     **** 		case 'E':
  58:../main.c     **** 		case 'F':
  59:../main.c     **** 			D8Led_symbol(c-'0');
 2008              		.loc 1 59 0
 2009 0104 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2010 0108 303043E2 		sub	r3, r3, #48
 2011 010c 0300A0E1 		mov	r0, r3
 2012 0110 FEFFFFEB 		bl	D8Led_symbol
  60:../main.c     **** 			led1_off();
 2013              		.loc 1 60 0
 2014 0114 FEFFFFEB 		bl	led1_off
  61:../main.c     **** 			led2_off();
 2015              		.loc 1 61 0
 2016 0118 FEFFFFEB 		bl	led2_off
  62:../main.c     **** 			break;
 2017              		.loc 1 62 0
 2018 011c 0000A0E1 		mov	r0, r0	@ nop
 2019              	.L2:
 2020              	.LBE4:
  63:../main.c     **** 
  64:../main.c     **** 		}
  65:../main.c     **** 		if(c == 'I'){
 2021              		.loc 1 65 0
 2022 0120 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2023 0124 490053E3 		cmp	r3, #73
 2024 0128 0200001A 		bne	.L7
 2025              	.LBB5:
  66:../main.c     **** 			led1_off();
 2026              		.loc 1 66 0
 2027 012c FEFFFFEB 		bl	led1_off
  67:../main.c     **** 			led2_on();
 2028              		.loc 1 67 0
 2029 0130 FEFFFFEB 		bl	led2_on
 2030              	.LBE5:
 2031              	.LBE2:
  68:../main.c     **** 		} else if(c=='D'){
  69:../main.c     **** 			led1_on();
  70:../main.c     **** 			led2_off();
  71:../main.c     **** 		} else {
  72:../main.c     **** 			led1_off();
  73:../main.c     **** 			led2_off();
  74:../main.c     **** 		}
  75:../main.c     **** 	};
 2032              		.loc 1 75 0
 2033 0134 BEFFFFEA 		b	.L10
 2034              	.L7:
 2035              	.LBB7:
  68:../main.c     **** 		} else if(c=='D'){
 2036              		.loc 1 68 0
 2037 0138 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2038 013c 440053E3 		cmp	r3, #68
 2039 0140 0200001A 		bne	.L9
 2040              	.LBB3:
  69:../main.c     **** 			led1_on();
 2041              		.loc 1 69 0
 2042 0144 FEFFFFEB 		bl	led1_on
  70:../main.c     **** 			led2_off();
 2043              		.loc 1 70 0
 2044 0148 FEFFFFEB 		bl	led2_off
 2045              	.LBE3:
 2046              	.LBE7:
 2047              		.loc 1 75 0
 2048 014c B8FFFFEA 		b	.L10
 2049              	.L9:
 2050              	.LBB8:
 2051              	.LBB6:
  72:../main.c     **** 			led1_off();
 2052              		.loc 1 72 0
 2053 0150 FEFFFFEB 		bl	led1_off
  73:../main.c     **** 			led2_off();
 2054              		.loc 1 73 0
 2055 0154 FEFFFFEB 		bl	led2_off
 2056              	.LBE6:
 2057              	.LBE8:
 2058              		.loc 1 75 0
 2059 0158 B5FFFFEA 		b	.L10
 2060              	.L12:
 2061              		.align	2
 2062              	.L11:
 2063 015c 00000000 		.word	str
 2064 0160 00C20100 		.word	115200
 2065              		.cfi_endproc
 2066              	.LFE0:
 2068              		.align	2
 2069              		.global	initPractica
 2071              	initPractica:
 2072              	.LFB1:
  76:../main.c     **** /*		*pt_str = Uart_Getch(); // leer caracter
  77:../main.c     **** 		Uart_SendByte(*pt_str); // enviar caracter
  78:../main.c     **** 		if (*pt_str == CR_char){ // retorno de carro?
  79:../main.c     **** 			if (pt_str != str) { // si cadena no vacia, mostrar
  80:../main.c     **** 				*(++pt_str) = '\0'; // terminar cadena antes
  81:../main.c     **** 				Uart_Printf("\n");
  82:../main.c     **** 				Uart_Printf(str);
  83:../main.c     **** 			}
  84:../main.c     **** 			Uart_Printf(str_send); // preparar siguiente
  85:../main.c     **** 			pt_str = str;
  86:../main.c     **** 		}
  87:../main.c     **** 		else if (++pt_str == str + 255){ // desbordamiento?
  88:../main.c     **** 			Uart_Printf(str_error); // avisar del desbordamiento
  89:../main.c     **** 			pt_str = str;
  90:../main.c     **** 		}
  91:../main.c     **** 	}
  92:../main.c     **** */
  93:../main.c     **** }
  94:../main.c     **** 
  95:../main.c     **** 
  96:../main.c     **** void initPractica(){
 2073              		.loc 1 96 0
 2074              		.cfi_startproc
 2075              		@ Function supports interworking.
 2076              		@ args = 0, pretend = 0, frame = 0
 2077              		@ frame_needed = 1, uses_anonymous_args = 0
 2078 0164 0DC0A0E1 		mov	ip, sp
 2079              	.LCFI2:
 2080              		.cfi_def_cfa_register 12
 2081 0168 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2082 016c 04B04CE2 		sub	fp, ip, #4
 2083              		.cfi_offset 14, -8
 2084              		.cfi_offset 13, -12
 2085              		.cfi_offset 11, -16
 2086              	.LCFI3:
 2087              		.cfi_def_cfa 11, 4
  97:../main.c     **** 	rI_ISPC = 0x3ffffff; //borrar interrupciones pendientes
 2088              		.loc 1 97 0
 2089 0170 50309FE5 		ldr	r3, .L14
 2090 0174 3F23E0E3 		mvn	r2, #-67108864
 2091 0178 002083E5 		str	r2, [r3, #0]
  98:../main.c     **** 
  99:../main.c     **** 	// Configura las lineas como de tipo IRQ mediante INTMOD
 100:../main.c     **** 	rINTMOD = 0x0;
 2092              		.loc 1 100 0
 2093 017c 48309FE5 		ldr	r3, .L14+4
 2094 0180 0020A0E3 		mov	r2, #0
 2095 0184 002083E5 		str	r2, [r3, #0]
 101:../main.c     **** 	// Habilita int. vectorizadas y la linea IRQ (FIQ no) mediante INTCON
 102:../main.c     **** 	rINTCON = 0x1;
 2096              		.loc 1 102 0
 2097 0188 1E36A0E3 		mov	r3, #31457280
 2098 018c 0120A0E3 		mov	r2, #1
 2099 0190 002083E5 		str	r2, [r3, #0]
 103:../main.c     **** 
 104:../main.c     **** 	// Enmascara todas las lineas excepto el bit global (INTMSK)
 105:../main.c     **** 	rINTMSK = ~( BIT_GLOBAL );
 2100              		.loc 1 105 0
 2101 0194 34309FE5 		ldr	r3, .L14+8
 2102 0198 0123E0E3 		mvn	r2, #67108864
 2103 019c 002083E5 		str	r2, [r3, #0]
 106:../main.c     **** 
 107:../main.c     **** 	//Iniciamos los distintos componentes
 108:../main.c     **** 	Eint4567_init();
 2104              		.loc 1 108 0
 2105 01a0 FEFFFFEB 		bl	Eint4567_init
 109:../main.c     **** 	keyboard_init();
 2106              		.loc 1 109 0
 2107 01a4 FEFFFFEB 		bl	keyboard_init
 110:../main.c     **** 
 111:../main.c     **** 
 112:../main.c     **** 	//Apagamos todos los leds y 8 segmentos
 113:../main.c     **** 	leds_off();
 2108              		.loc 1 113 0
 2109 01a8 FEFFFFEB 		bl	leds_off
 114:../main.c     **** 	D8Led_init();
 2110              		.loc 1 114 0
 2111 01ac FEFFFFEB 		bl	D8Led_init
 115:../main.c     **** 
 116:../main.c     **** 	/* Por precaucion, se vuelven a borrar los bits de INTPND y EXTINTPND */
 117:../main.c     **** 	rI_ISPC = 0x3ffffff;
 2112              		.loc 1 117 0
 2113 01b0 10309FE5 		ldr	r3, .L14
 2114 01b4 3F23E0E3 		mvn	r2, #-67108864
 2115 01b8 002083E5 		str	r2, [r3, #0]
 118:../main.c     **** }
 2116              		.loc 1 118 0
 2117 01bc 0CD04BE2 		sub	sp, fp, #12
 2118 01c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2119 01c4 1EFF2FE1 		bx	lr
 2120              	.L15:
 2121              		.align	2
 2122              	.L14:
 2123 01c8 2400E001 		.word	31457316
 2124 01cc 0800E001 		.word	31457288
 2125 01d0 0C00E001 		.word	31457292
 2126              		.cfi_endproc
 2127              	.LFE1:
 2129              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\USUARI~1\AppData\Local\Temp\ccMV3NRj.s:1892   .data:00000000 str_send
C:\Users\USUARI~1\AppData\Local\Temp\ccMV3NRj.s:1889   .data:00000000 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccMV3NRj.s:1898   .data:0000000c str_error
                            *COM*:00000100 str
C:\Users\USUARI~1\AppData\Local\Temp\ccMV3NRj.s:1903   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccMV3NRj.s:1906   .text:00000000 Main
C:\Users\USUARI~1\AppData\Local\Temp\ccMV3NRj.s:2071   .text:00000164 initPractica
C:\Users\USUARI~1\AppData\Local\Temp\ccMV3NRj.s:1957   .text:00000060 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccMV3NRj.s:1995   .text:000000ec $a
C:\Users\USUARI~1\AppData\Local\Temp\ccMV3NRj.s:2063   .text:0000015c $d
C:\Users\USUARI~1\AppData\Local\Temp\ccMV3NRj.s:2068   .text:00000164 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccMV3NRj.s:2123   .text:000001c8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sys_init
Uart_Init
Uart_Config
Eint4567_activar
keyboard_activar
Uart_Getch1
Uart_SendByte0
led1_on
led2_off
led1_off
led2_on
D8Led_symbol
Eint4567_init
keyboard_init
leds_off
D8Led_init
