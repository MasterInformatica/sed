   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"keyboard.c"
  21              	.Ltext0:
  22              		.file 1 "../keyboard.c"
 1955              		.align	2
 1958              	keyboard_base:
 1959 0000 00000006 		.word	100663296
 1960              		.comm	key,4,4
 1961              		.text
 1962              		.align	2
 1963              		.global	keyboard_init
 1965              	keyboard_init:
 1966              	.LFB0:
   1:../keyboard.c **** /*--- Ficheros de cabecera ---*/
   2:../keyboard.c **** #include "44b.h"
   3:../keyboard.c **** #include "44blib.h"
   4:../keyboard.c **** #include "def.h"
   5:../keyboard.c **** 
   6:../keyboard.c **** /*--- Definición de macros ---*/
   7:../keyboard.c **** #define KEY_VALUE_MASK 0xF
   8:../keyboard.c **** 
   9:../keyboard.c **** /*--- Variables globales ---*/
  10:../keyboard.c **** volatile UCHAR *keyboard_base = (UCHAR *)0x06000000;
  11:../keyboard.c **** int key;
  12:../keyboard.c **** 
  13:../keyboard.c **** /*--- Funciones externas ---*/
  14:../keyboard.c **** void D8Led_symbol(int value);
  15:../keyboard.c **** 
  16:../keyboard.c **** /*--- Declaracion de funciones ---*/
  17:../keyboard.c **** void keyboard_init();
  18:../keyboard.c **** void Keyboard_ISR(void) __attribute__ ((interrupt ("IRQ")));
  19:../keyboard.c **** 
  20:../keyboard.c **** 
  21:../keyboard.c **** 
  22:../keyboard.c **** /*--- Codigo de las funciones ---*/
  23:../keyboard.c **** void keyboard_init()
  24:../keyboard.c **** {
 1967              		.loc 1 24 0
 1968              		.cfi_startproc
 1969              		@ Function supports interworking.
 1970              		@ args = 0, pretend = 0, frame = 0
 1971              		@ frame_needed = 1, uses_anonymous_args = 0
 1972 0000 0DC0A0E1 		mov	ip, sp
 1973              	.LCFI0:
 1974              		.cfi_def_cfa_register 12
 1975 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1976 0008 04B04CE2 		sub	fp, ip, #4
 1977              		.cfi_offset 14, -8
 1978              		.cfi_offset 13, -12
 1979              		.cfi_offset 11, -16
 1980              	.LCFI1:
 1981              		.cfi_def_cfa 11, 4
  25:../keyboard.c **** 	/* Configurar el puerto G (si no lo estuviese ya) */	
  26:../keyboard.c **** 		// Establece la funcion de los pines (EINT0-7)
  27:../keyboard.c **** 		rPCONG = rPCONG | 0xC;
 1982              		.loc 1 27 0
 1983 000c 50309FE5 		ldr	r3, .L2
 1984 0010 4C209FE5 		ldr	r2, .L2
 1985 0014 002092E5 		ldr	r2, [r2, #0]
 1986 0018 0C2082E3 		orr	r2, r2, #12
 1987 001c 002083E5 		str	r2, [r3, #0]
  28:../keyboard.c **** 
  29:../keyboard.c **** 		// Habilita el "pull up" del puerto
  30:../keyboard.c **** 		rPUPG = 0x0;
 1988              		.loc 1 30 0
 1989 0020 40309FE5 		ldr	r3, .L2+4
 1990 0024 0020A0E3 		mov	r2, #0
 1991 0028 002083E5 		str	r2, [r3, #0]
  31:../keyboard.c **** 
  32:../keyboard.c **** 		// Configura las lineas de int. como de flanco de bajada mediante EXTINT
  33:../keyboard.c **** 		rEXTINT = rEXTINT | 0x00000030;
 1992              		.loc 1 33 0
 1993 002c 38309FE5 		ldr	r3, .L2+8
 1994 0030 34209FE5 		ldr	r2, .L2+8
 1995 0034 002092E5 		ldr	r2, [r2, #0]
 1996 0038 302082E3 		orr	r2, r2, #48
 1997 003c 002083E5 		str	r2, [r3, #0]
  34:../keyboard.c **** 
  35:../keyboard.c **** 		/* Establece la rutina de servicio para EINT1 */
  36:../keyboard.c **** 		pISR_EINT1 = (unsigned) Keyboard_ISR;
 1998              		.loc 1 36 0
 1999 0040 28309FE5 		ldr	r3, .L2+12
 2000 0044 28209FE5 		ldr	r2, .L2+16
 2001 0048 002083E5 		str	r2, [r3, #0]
  37:../keyboard.c **** 
  38:../keyboard.c **** 		// Borra INTPND escribiendo 1s en I_ISPC
  39:../keyboard.c **** 		rI_ISPC = BIT_EINT1;
 2002              		.loc 1 39 0
 2003 004c 24309FE5 		ldr	r3, .L2+20
 2004 0050 0124A0E3 		mov	r2, #16777216
 2005 0054 002083E5 		str	r2, [r3, #0]
  40:../keyboard.c **** 
  41:../keyboard.c **** }
 2006              		.loc 1 41 0
 2007 0058 0CD04BE2 		sub	sp, fp, #12
 2008 005c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2009 0060 1EFF2FE1 		bx	lr
 2010              	.L3:
 2011              		.align	2
 2012              	.L2:
 2013 0064 4000D201 		.word	30539840
 2014 0068 4800D201 		.word	30539848
 2015 006c 5000D201 		.word	30539856
 2016 0070 80FF7F0C 		.word	209715072
 2017 0074 00000000 		.word	Keyboard_ISR
 2018 0078 2400E001 		.word	31457316
 2019              		.cfi_endproc
 2020              	.LFE0:
 2022              		.align	2
 2023              		.global	keyboard_activar
 2025              	keyboard_activar:
 2026              	.LFB1:
  42:../keyboard.c **** 
  43:../keyboard.c **** void keyboard_activar(){
 2027              		.loc 1 43 0
 2028              		.cfi_startproc
 2029              		@ Function supports interworking.
 2030              		@ args = 0, pretend = 0, frame = 0
 2031              		@ frame_needed = 1, uses_anonymous_args = 0
 2032 007c 0DC0A0E1 		mov	ip, sp
 2033              	.LCFI2:
 2034              		.cfi_def_cfa_register 12
 2035 0080 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2036 0084 04B04CE2 		sub	fp, ip, #4
 2037              		.cfi_offset 14, -8
 2038              		.cfi_offset 13, -12
 2039              		.cfi_offset 11, -16
 2040              	.LCFI3:
 2041              		.cfi_def_cfa 11, 4
  44:../keyboard.c **** 	//borrar interrupciones pendientes
  45:../keyboard.c **** 	rI_ISPC = BIT_EINT1;
 2042              		.loc 1 45 0
 2043 0088 30309FE5 		ldr	r3, .L5
 2044 008c 0124A0E3 		mov	r2, #16777216
 2045 0090 002083E5 		str	r2, [r3, #0]
  46:../keyboard.c **** 
  47:../keyboard.c **** 	// Habilitar linea EINT1
  48:../keyboard.c **** 	rINTMSK = rINTMSK & ~( BIT_EINT1 );
 2046              		.loc 1 48 0
 2047 0094 28309FE5 		ldr	r3, .L5+4
 2048 0098 24209FE5 		ldr	r2, .L5+4
 2049 009c 002092E5 		ldr	r2, [r2, #0]
 2050 00a0 0124C2E3 		bic	r2, r2, #16777216
 2051 00a4 002083E5 		str	r2, [r3, #0]
  49:../keyboard.c **** 
  50:../keyboard.c **** 	//borrar interrupciones pendientes
  51:../keyboard.c **** 	rI_ISPC = BIT_EINT1;
 2052              		.loc 1 51 0
 2053 00a8 10309FE5 		ldr	r3, .L5
 2054 00ac 0124A0E3 		mov	r2, #16777216
 2055 00b0 002083E5 		str	r2, [r3, #0]
  52:../keyboard.c **** }
 2056              		.loc 1 52 0
 2057 00b4 0CD04BE2 		sub	sp, fp, #12
 2058 00b8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2059 00bc 1EFF2FE1 		bx	lr
 2060              	.L6:
 2061              		.align	2
 2062              	.L5:
 2063 00c0 2400E001 		.word	31457316
 2064 00c4 0C00E001 		.word	31457292
 2065              		.cfi_endproc
 2066              	.LFE1:
 2068              		.align	2
 2069              		.global	keyboard_desactivar
 2071              	keyboard_desactivar:
 2072              	.LFB2:
  53:../keyboard.c **** 
  54:../keyboard.c **** void keyboard_desactivar(){
 2073              		.loc 1 54 0
 2074              		.cfi_startproc
 2075              		@ Function supports interworking.
 2076              		@ args = 0, pretend = 0, frame = 0
 2077              		@ frame_needed = 1, uses_anonymous_args = 0
 2078 00c8 0DC0A0E1 		mov	ip, sp
 2079              	.LCFI4:
 2080              		.cfi_def_cfa_register 12
 2081 00cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2082 00d0 04B04CE2 		sub	fp, ip, #4
 2083              		.cfi_offset 14, -8
 2084              		.cfi_offset 13, -12
 2085              		.cfi_offset 11, -16
 2086              	.LCFI5:
 2087              		.cfi_def_cfa 11, 4
  55:../keyboard.c **** 	// Desabilitar linea EINT1
  56:../keyboard.c **** 	rINTMSK = rINTMSK | BIT_EINT1;
 2088              		.loc 1 56 0
 2089 00d4 24309FE5 		ldr	r3, .L8
 2090 00d8 20209FE5 		ldr	r2, .L8
 2091 00dc 002092E5 		ldr	r2, [r2, #0]
 2092 00e0 012482E3 		orr	r2, r2, #16777216
 2093 00e4 002083E5 		str	r2, [r3, #0]
  57:../keyboard.c **** 
  58:../keyboard.c **** 	//borrar interrupciones pendientes
  59:../keyboard.c **** 	rI_ISPC = BIT_EINT1;
 2094              		.loc 1 59 0
 2095 00e8 14309FE5 		ldr	r3, .L8+4
 2096 00ec 0124A0E3 		mov	r2, #16777216
 2097 00f0 002083E5 		str	r2, [r3, #0]
  60:../keyboard.c **** }
 2098              		.loc 1 60 0
 2099 00f4 0CD04BE2 		sub	sp, fp, #12
 2100 00f8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2101 00fc 1EFF2FE1 		bx	lr
 2102              	.L9:
 2103              		.align	2
 2104              	.L8:
 2105 0100 0C00E001 		.word	31457292
 2106 0104 2400E001 		.word	31457316
 2107              		.cfi_endproc
 2108              	.LFE2:
 2110              		.align	2
 2111              		.global	Keyboard_ISR
 2113              	Keyboard_ISR:
 2114              	.LFB3:
  61:../keyboard.c **** 
  62:../keyboard.c **** 
  63:../keyboard.c **** void Keyboard_ISR(void)
  64:../keyboard.c **** {
 2115              		.loc 1 64 0
 2116              		.cfi_startproc
 2117              		@ Interrupt Service Routine.
 2118              		@ args = 0, pretend = 0, frame = 8
 2119              		@ frame_needed = 1, uses_anonymous_args = 0
 2120 0108 04C02DE5 		str	ip, [sp, #-4]!
 2121 010c 0DC0A0E1 		mov	ip, sp
 2122              	.LCFI6:
 2123              		.cfi_def_cfa_register 12
 2124 0110 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2125 0114 04B04CE2 		sub	fp, ip, #4
 2126              		.cfi_offset 14, -8
 2127              		.cfi_offset 13, -12
 2128              		.cfi_offset 11, -16
 2129              		.cfi_offset 3, -20
 2130              		.cfi_offset 2, -24
 2131              		.cfi_offset 1, -28
 2132              		.cfi_offset 0, -32
 2133              	.LCFI7:
 2134              		.cfi_def_cfa 11, 4
 2135 0118 08D04DE2 		sub	sp, sp, #8
  65:../keyboard.c **** 	/* Esperar trp mediante la funcion DelayMs()*/
  66:../keyboard.c **** 	DelayMs(20);//trp=20ms
 2136              		.loc 1 66 0
 2137 011c 1400A0E3 		mov	r0, #20
 2138 0120 FEFFFFEB 		bl	DelayMs
  67:../keyboard.c **** 
  68:../keyboard.c **** 	/* Identificar la tecla */
  69:../keyboard.c **** 	int pulsado = key_read();
 2139              		.loc 1 69 0
 2140 0124 FEFFFFEB 		bl	key_read
 2141 0128 20000BE5 		str	r0, [fp, #-32]
  70:../keyboard.c **** 
  71:../keyboard.c **** 		if (pulsado > 9){
 2142              		.loc 1 71 0
 2143 012c 20301BE5 		ldr	r3, [fp, #-32]
 2144 0130 090053E3 		cmp	r3, #9
 2145 0134 0B0000DA 		ble	.L11
 2146              	.LBB2:
  72:../keyboard.c **** 			pulsado = pulsado - 10;
 2147              		.loc 1 72 0
 2148 0138 20301BE5 		ldr	r3, [fp, #-32]
 2149 013c 0A3043E2 		sub	r3, r3, #10
 2150 0140 20300BE5 		str	r3, [fp, #-32]
  73:../keyboard.c **** 			Uart_SendByte1(pulsado +'A');
 2151              		.loc 1 73 0
 2152 0144 20301BE5 		ldr	r3, [fp, #-32]
 2153 0148 413083E2 		add	r3, r3, #65
 2154 014c 0300A0E1 		mov	r0, r3
 2155 0150 FEFFFFEB 		bl	Uart_SendByte1
  74:../keyboard.c **** 			Uart_SendByte0(pulsado +'A');
 2156              		.loc 1 74 0
 2157 0154 20301BE5 		ldr	r3, [fp, #-32]
 2158 0158 413083E2 		add	r3, r3, #65
 2159 015c 0300A0E1 		mov	r0, r3
 2160 0160 FEFFFFEB 		bl	Uart_SendByte0
 2161              	.LBE2:
  75:../keyboard.c **** 
  76:../keyboard.c **** 		}else{
  77:../keyboard.c **** 			Uart_SendByte1(pulsado +'0');
  78:../keyboard.c **** 			Uart_SendByte0(pulsado +'0');
  79:../keyboard.c **** 		}
  80:../keyboard.c **** 
  81:../keyboard.c **** 	/* Esperar a se libere la tecla: consultar bit 1 del registro de datos del puerto G */
  82:../keyboard.c **** 	while (!(rPDATG & 0x2)){}
 2162              		.loc 1 82 0
 2163 0164 080000EA 		b	.L13
 2164              	.L11:
 2165              	.LBB3:
  77:../keyboard.c **** 			Uart_SendByte1(pulsado +'0');
 2166              		.loc 1 77 0
 2167 0168 20301BE5 		ldr	r3, [fp, #-32]
 2168 016c 303083E2 		add	r3, r3, #48
 2169 0170 0300A0E1 		mov	r0, r3
 2170 0174 FEFFFFEB 		bl	Uart_SendByte1
  78:../keyboard.c **** 			Uart_SendByte0(pulsado +'0');
 2171              		.loc 1 78 0
 2172 0178 20301BE5 		ldr	r3, [fp, #-32]
 2173 017c 303083E2 		add	r3, r3, #48
 2174 0180 0300A0E1 		mov	r0, r3
 2175 0184 FEFFFFEB 		bl	Uart_SendByte0
 2176              	.LBE3:
 2177              		.loc 1 82 0
 2178 0188 0000A0E1 		mov	r0, r0	@ nop
 2179              	.L13:
 2180              		.loc 1 82 0 is_stmt 0 discriminator 1
 2181 018c 30309FE5 		ldr	r3, .L14
 2182 0190 003093E5 		ldr	r3, [r3, #0]
 2183 0194 023003E2 		and	r3, r3, #2
 2184 0198 000053E3 		cmp	r3, #0
 2185 019c FAFFFF0A 		beq	.L13
  83:../keyboard.c **** 
  84:../keyboard.c **** 	/* Esperar trd mediante la funcion Delay() */
  85:../keyboard.c **** 	DelayMs(100);//trd=100ms
 2186              		.loc 1 85 0 is_stmt 1
 2187 01a0 6400A0E3 		mov	r0, #100
 2188 01a4 FEFFFFEB 		bl	DelayMs
  86:../keyboard.c **** 	/* Borrar interrupción de teclado */
  87:../keyboard.c **** 	rI_ISPC = BIT_EINT1;
 2189              		.loc 1 87 0
 2190 01a8 18309FE5 		ldr	r3, .L14+4
 2191 01ac 0124A0E3 		mov	r2, #16777216
 2192 01b0 002083E5 		str	r2, [r3, #0]
  88:../keyboard.c **** }
 2193              		.loc 1 88 0
 2194 01b4 1CD04BE2 		sub	sp, fp, #28
 2195 01b8 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2196 01bc 04C09DE4 		ldmfd	sp!, {ip}
 2197 01c0 04F05EE2 		subs	pc, lr, #4
 2198              	.L15:
 2199              		.align	2
 2200              	.L14:
 2201 01c4 4400D201 		.word	30539844
 2202 01c8 2400E001 		.word	31457316
 2203              		.cfi_endproc
 2204              	.LFE3:
 2206              		.align	2
 2207              		.global	key_read
 2209              	key_read:
 2210              	.LFB4:
  89:../keyboard.c **** 
  90:../keyboard.c **** int key_read()
  91:../keyboard.c **** {
 2211              		.loc 1 91 0
 2212              		.cfi_startproc
 2213              		@ Function supports interworking.
 2214              		@ args = 0, pretend = 0, frame = 32
 2215              		@ frame_needed = 1, uses_anonymous_args = 0
 2216 01cc 0DC0A0E1 		mov	ip, sp
 2217              	.LCFI8:
 2218              		.cfi_def_cfa_register 12
 2219 01d0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2220 01d4 04B04CE2 		sub	fp, ip, #4
 2221              		.cfi_offset 14, -8
 2222              		.cfi_offset 13, -12
 2223              		.cfi_offset 11, -16
 2224              	.LCFI9:
 2225              		.cfi_def_cfa 11, 4
 2226 01d8 20D04DE2 		sub	sp, sp, #32
  92:../keyboard.c **** 	short int i=0;
 2227              		.loc 1 92 0
 2228 01dc 0030A0E3 		mov	r3, #0
 2229 01e0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  93:../keyboard.c **** 
  94:../keyboard.c **** 	int value= -1;
 2230              		.loc 1 94 0
 2231 01e4 0030E0E3 		mvn	r3, #0
 2232 01e8 14300BE5 		str	r3, [fp, #-20]
  95:../keyboard.c **** 	char temp;
  96:../keyboard.c **** 	// Identificar la tecla mediante ''scanning''
  97:../keyboard.c **** 	// Para el juego solo es necesario detectar las dos primeras teclas.
  98:../keyboard.c **** 
  99:../keyboard.c **** 	unsigned int offset[4] = {0xFD,0xFB,0xF7,0xEF};
 2233              		.loc 1 99 0
 2234 01ec F8309FE5 		ldr	r3, .L25
 2235 01f0 28C04BE2 		sub	ip, fp, #40
 2236 01f4 0F0093E8 		ldmia	r3, {r0, r1, r2, r3}
 2237 01f8 0F008CE8 		stmia	ip, {r0, r1, r2, r3}
 100:../keyboard.c **** 
 101:../keyboard.c **** 	for(i=0; i<4; i++){
 2238              		.loc 1 101 0
 2239 01fc 0030A0E3 		mov	r3, #0
 2240 0200 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2241 0204 300000EA 		b	.L17
 2242              	.L24:
 102:../keyboard.c **** 		temp = *(keyboard_base + (offset[i])) & KEY_VALUE_MASK;
 2243              		.loc 1 102 0
 2244 0208 E0309FE5 		ldr	r3, .L25+4
 2245 020c 002093E5 		ldr	r2, [r3, #0]
 2246 0210 FE105BE1 		ldrsh	r1, [fp, #-14]
 2247 0214 1B30E0E3 		mvn	r3, #27
 2248 0218 0111A0E1 		mov	r1, r1, asl #2
 2249 021c 0C004BE2 		sub	r0, fp, #12
 2250 0220 011080E0 		add	r1, r0, r1
 2251 0224 033081E0 		add	r3, r1, r3
 2252 0228 003093E5 		ldr	r3, [r3, #0]
 2253 022c 033082E0 		add	r3, r2, r3
 2254 0230 0030D3E5 		ldrb	r3, [r3, #0]
 2255 0234 FF3003E2 		and	r3, r3, #255
 2256 0238 0F3003E2 		and	r3, r3, #15
 2257 023c 15304BE5 		strb	r3, [fp, #-21]
 103:../keyboard.c **** 
 104:../keyboard.c **** 		switch (temp) {
 2258              		.loc 1 104 0
 2259 0240 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2260 0244 073043E2 		sub	r3, r3, #7
 2261 0248 070053E3 		cmp	r3, #7
 2262 024c 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 2263 0250 1A0000EA 		b	.L18
 2264              	.L23:
 2265 0254 74020000 		.word	.L19
 2266 0258 C0020000 		.word	.L18
 2267 025c C0020000 		.word	.L18
 2268 0260 C0020000 		.word	.L18
 2269 0264 84020000 		.word	.L20
 2270 0268 C0020000 		.word	.L18
 2271 026c 98020000 		.word	.L21
 2272 0270 AC020000 		.word	.L22
 2273              	.L19:
 105:../keyboard.c **** 			case 0x7:  value = 0 + (i*4); break;
 2274              		.loc 1 105 0
 2275 0274 FE305BE1 		ldrsh	r3, [fp, #-14]
 2276 0278 0331A0E1 		mov	r3, r3, asl #2
 2277 027c 14300BE5 		str	r3, [fp, #-20]
 2278 0280 0E0000EA 		b	.L18
 2279              	.L20:
 106:../keyboard.c **** 			case 0xB:  value = 1 + (i*4); break;
 2280              		.loc 1 106 0
 2281 0284 FE305BE1 		ldrsh	r3, [fp, #-14]
 2282 0288 0331A0E1 		mov	r3, r3, asl #2
 2283 028c 013083E2 		add	r3, r3, #1
 2284 0290 14300BE5 		str	r3, [fp, #-20]
 2285 0294 090000EA 		b	.L18
 2286              	.L21:
 107:../keyboard.c **** 			case 0xD:  value = 2 + (i*4); break;
 2287              		.loc 1 107 0
 2288 0298 FE305BE1 		ldrsh	r3, [fp, #-14]
 2289 029c 0331A0E1 		mov	r3, r3, asl #2
 2290 02a0 023083E2 		add	r3, r3, #2
 2291 02a4 14300BE5 		str	r3, [fp, #-20]
 2292 02a8 040000EA 		b	.L18
 2293              	.L22:
 108:../keyboard.c **** 			case 0xE:  value = 3 + (i*4); break;
 2294              		.loc 1 108 0
 2295 02ac FE305BE1 		ldrsh	r3, [fp, #-14]
 2296 02b0 0331A0E1 		mov	r3, r3, asl #2
 2297 02b4 033083E2 		add	r3, r3, #3
 2298 02b8 14300BE5 		str	r3, [fp, #-20]
 2299 02bc 0000A0E1 		mov	r0, r0	@ nop
 2300              	.L18:
 101:../keyboard.c **** 	for(i=0; i<4; i++){
 2301              		.loc 1 101 0
 2302 02c0 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2303 02c4 013083E2 		add	r3, r3, #1
 2304 02c8 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2305              	.L17:
 101:../keyboard.c **** 	for(i=0; i<4; i++){
 2306              		.loc 1 101 0 is_stmt 0 discriminator 1
 2307 02cc FE305BE1 		ldrsh	r3, [fp, #-14]
 2308 02d0 030053E3 		cmp	r3, #3
 2309 02d4 CBFFFFDA 		ble	.L24
 109:../keyboard.c **** 		}
 110:../keyboard.c **** 	}
 111:../keyboard.c **** 
 112:../keyboard.c **** 	return value;
 2310              		.loc 1 112 0 is_stmt 1
 2311 02d8 14301BE5 		ldr	r3, [fp, #-20]
 113:../keyboard.c **** 
 114:../keyboard.c **** 
 115:../keyboard.c **** }
 2312              		.loc 1 115 0
 2313 02dc 0300A0E1 		mov	r0, r3
 2314 02e0 0CD04BE2 		sub	sp, fp, #12
 2315 02e4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2316 02e8 1EFF2FE1 		bx	lr
 2317              	.L26:
 2318              		.align	2
 2319              	.L25:
 2320 02ec 00000000 		.word	C.0.4731
 2321 02f0 00000000 		.word	keyboard_base
 2322              		.cfi_endproc
 2323              	.LFE4:
 2325              		.section	.rodata
 2326              		.align	2
 2329              	C.0.4731:
 2330 0000 FD000000 		.word	253
 2331 0004 FB000000 		.word	251
 2332 0008 F7000000 		.word	247
 2333 000c EF000000 		.word	239
 2334              		.text
 2335              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 keyboard.c
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:1958   .data:00000000 keyboard_base
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:1955   .data:00000000 $d
                            *COM*:00000004 key
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:1962   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:1965   .text:00000000 keyboard_init
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2013   .text:00000064 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2113   .text:00000108 Keyboard_ISR
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2022   .text:0000007c $a
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2025   .text:0000007c keyboard_activar
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2063   .text:000000c0 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2068   .text:000000c8 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2071   .text:000000c8 keyboard_desactivar
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2105   .text:00000100 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2110   .text:00000108 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2209   .text:000001cc key_read
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2201   .text:000001c4 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2206   .text:000001cc $a
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2265   .text:00000254 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2275   .text:00000274 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2320   .text:000002ec $d
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2329   .rodata:00000000 C.0.4731
C:\Users\USUARI~1\AppData\Local\Temp\cc9wkRax.s:2326   .rodata:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
DelayMs
Uart_SendByte1
Uart_SendByte0
