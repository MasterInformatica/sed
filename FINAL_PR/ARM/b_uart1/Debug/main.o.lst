   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  21              	.Ltext0:
  22              		.file 1 "../main.c"
 1889              		.align	2
 1892              	str_send:
 1893 0000 0A534544 		.ascii	"\012SED-P4 >\000"
 1893      2D503420 
 1893      3E00
 1894              		.global	str_error
 1895 000a 0000     		.align	2
 1898              	str_error:
 1899 000c 0A536520 		.ascii	"\012Se ha producido un desbordamiento!\012\000\000"
 1899      68612070 
 1899      726F6475 
 1899      6369646F 
 1899      20756E20 
 1900 0032 00000000 		.space	12
 1900      00000000 
 1900      00000000 
 1901              		.comm	str,256,4
 1902 003e 0000     		.text
 1903              		.align	2
 1904              		.global	Main
 1906              	Main:
 1907              	.LFB0:
   1:../main.c     **** /*--- ficheros de cabecera ---*/
   2:../main.c     **** #include "44blib.h"
   3:../main.c     **** #include "44b.h"
   4:../main.c     **** #include "uart.h"
   5:../main.c     **** /*--- declaracion de funciones ---*/
   6:../main.c     **** int Main(void);
   7:../main.c     **** 
   8:../main.c     **** /*--- variables globales ---*/
   9:../main.c     **** char str_send[10] = "\nSED-P4 >\0";
  10:../main.c     **** char str_error[50] = "\nSe ha producido un desbordamiento!\n\0";
  11:../main.c     **** char str[256];
  12:../main.c     **** 
  13:../main.c     **** void initPractica();
  14:../main.c     **** extern int key;
  15:../main.c     **** /*--- codigo de la funcion ---*/
  16:../main.c     **** int Main(void){
 1908              		.loc 1 16 0
 1909              		.cfi_startproc
 1910              		@ Function supports interworking.
 1911              		@ args = 0, pretend = 0, frame = 8
 1912              		@ frame_needed = 1, uses_anonymous_args = 0
 1913 0000 0DC0A0E1 		mov	ip, sp
 1914              	.LCFI0:
 1915              		.cfi_def_cfa_register 12
 1916 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1917 0008 04B04CE2 		sub	fp, ip, #4
 1918              		.cfi_offset 14, -8
 1919              		.cfi_offset 13, -12
 1920              		.cfi_offset 11, -16
 1921              	.LCFI1:
 1922              		.cfi_def_cfa 11, 4
 1923 000c 08D04DE2 		sub	sp, sp, #8
  17:../main.c     **** 
  18:../main.c     **** 	char *pt_str = str;
 1924              		.loc 1 18 0
 1925 0010 34309FE5 		ldr	r3, .L3
 1926 0014 10300BE5 		str	r3, [fp, #-16]
  19:../main.c     **** 
  20:../main.c     **** 	sys_init(); // inicializacion de la placa, interrupciones, puertos
 1927              		.loc 1 20 0
 1928 0018 FEFFFFEB 		bl	sys_init
  21:../main.c     **** 	key = 0;
 1929              		.loc 1 21 0
 1930 001c 2C309FE5 		ldr	r3, .L3+4
 1931 0020 0020A0E3 		mov	r2, #0
 1932 0024 002083E5 		str	r2, [r3, #0]
  22:../main.c     **** 	Uart0_Init(115200); // inicializacion de la Uart
 1933              		.loc 1 22 0
 1934 0028 24009FE5 		ldr	r0, .L3+8
 1935 002c FEFFFFEB 		bl	Uart0_Init
  23:../main.c     **** 	Uart1_Init(115200); // inicializacion de la Uart
 1936              		.loc 1 23 0
 1937 0030 1C009FE5 		ldr	r0, .L3+8
 1938 0034 FEFFFFEB 		bl	Uart1_Init
  24:../main.c     **** 	Uart_Config(); // configuración de interrupciones y buffers
 1939              		.loc 1 24 0
 1940 0038 FEFFFFEB 		bl	Uart_Config
  25:../main.c     **** //	Uart_Printf(str_send); // mostrar cabecera
  26:../main.c     **** 
  27:../main.c     **** 	initPractica();
 1941              		.loc 1 27 0
 1942 003c FEFFFFEB 		bl	initPractica
  28:../main.c     **** 	Eint4567_activar();
 1943              		.loc 1 28 0
 1944 0040 FEFFFFEB 		bl	Eint4567_activar
  29:../main.c     **** 	keyboard_activar();
 1945              		.loc 1 29 0
 1946 0044 FEFFFFEB 		bl	keyboard_activar
 1947              	.L2:
  30:../main.c     **** 
  31:../main.c     **** 	char c;
  32:../main.c     **** 	while(1){
  33:../main.c     **** 		/*c = Uart_Getch1();
  34:../main.c     **** 		Uart_SendByte0(c);
  35:../main.c     **** 		switch(c){
  36:../main.c     **** 		case 'L':
  37:../main.c     **** 			led1_on();
  38:../main.c     **** 			led2_off();
  39:../main.c     **** 			break;
  40:../main.c     **** 		case 'R':
  41:../main.c     **** 			led1_off();
  42:../main.c     **** 			led2_on();
  43:../main.c     **** 			break;
  44:../main.c     **** 		case '0':
  45:../main.c     **** 		case '1':
  46:../main.c     **** 		case '2':
  47:../main.c     **** 		case '3':
  48:../main.c     **** 		case '4':
  49:../main.c     **** 		case '5':
  50:../main.c     **** 		case '6':
  51:../main.c     **** 		case '7':
  52:../main.c     **** 		case '8':
  53:../main.c     **** 		case '9':
  54:../main.c     **** 			D8Led_symbol(c-'0');
  55:../main.c     **** 			led1_off();
  56:../main.c     **** 			led2_off();
  57:../main.c     **** 			break;
  58:../main.c     **** 		case 'A':
  59:../main.c     **** 		case 'B':
  60:../main.c     **** 		case 'C':
  61:../main.c     **** 		case 'D':
  62:../main.c     **** 		case 'E':
  63:../main.c     **** 		case 'F':
  64:../main.c     **** 			D8Led_symbol(c-'A'+10);
  65:../main.c     **** 			led1_off();
  66:../main.c     **** 			led2_off();
  67:../main.c     **** 			break;
  68:../main.c     **** 
  69:../main.c     **** 		}
  70:../main.c     **** */
  71:../main.c     **** 	};
 1948              		.loc 1 71 0 discriminator 1
 1949 0048 FEFFFFEA 		b	.L2
 1950              	.L4:
 1951              		.align	2
 1952              	.L3:
 1953 004c 00000000 		.word	str
 1954 0050 00000000 		.word	key
 1955 0054 00C20100 		.word	115200
 1956              		.cfi_endproc
 1957              	.LFE0:
 1959              		.align	2
 1960              		.global	initPractica
 1962              	initPractica:
 1963              	.LFB1:
  72:../main.c     **** /*		*pt_str = Uart_Getch(); // leer caracter
  73:../main.c     **** 		Uart_SendByte(*pt_str); // enviar caracter
  74:../main.c     **** 		if (*pt_str == CR_char){ // retorno de carro?
  75:../main.c     **** 			if (pt_str != str) { // si cadena no vacia, mostrar
  76:../main.c     **** 				*(++pt_str) = '\0'; // terminar cadena antes
  77:../main.c     **** 				Uart_Printf("\n");
  78:../main.c     **** 				Uart_Printf(str);
  79:../main.c     **** 			}
  80:../main.c     **** 			Uart_Printf(str_send); // preparar siguiente
  81:../main.c     **** 			pt_str = str;
  82:../main.c     **** 		}
  83:../main.c     **** 		else if (++pt_str == str + 255){ // desbordamiento?
  84:../main.c     **** 			Uart_Printf(str_error); // avisar del desbordamiento
  85:../main.c     **** 			pt_str = str;
  86:../main.c     **** 		}
  87:../main.c     **** 	}
  88:../main.c     **** */
  89:../main.c     **** }
  90:../main.c     **** 
  91:../main.c     **** 
  92:../main.c     **** void initPractica(){
 1964              		.loc 1 92 0
 1965              		.cfi_startproc
 1966              		@ Function supports interworking.
 1967              		@ args = 0, pretend = 0, frame = 0
 1968              		@ frame_needed = 1, uses_anonymous_args = 0
 1969 0058 0DC0A0E1 		mov	ip, sp
 1970              	.LCFI2:
 1971              		.cfi_def_cfa_register 12
 1972 005c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1973 0060 04B04CE2 		sub	fp, ip, #4
 1974              		.cfi_offset 14, -8
 1975              		.cfi_offset 13, -12
 1976              		.cfi_offset 11, -16
 1977              	.LCFI3:
 1978              		.cfi_def_cfa 11, 4
  93:../main.c     **** 	rI_ISPC = 0x3ffffff; //borrar interrupciones pendientes
 1979              		.loc 1 93 0
 1980 0064 50309FE5 		ldr	r3, .L6
 1981 0068 3F23E0E3 		mvn	r2, #-67108864
 1982 006c 002083E5 		str	r2, [r3, #0]
  94:../main.c     **** 
  95:../main.c     **** 	// Configura las lineas como de tipo IRQ mediante INTMOD
  96:../main.c     **** 	rINTMOD = 0x0;
 1983              		.loc 1 96 0
 1984 0070 48309FE5 		ldr	r3, .L6+4
 1985 0074 0020A0E3 		mov	r2, #0
 1986 0078 002083E5 		str	r2, [r3, #0]
  97:../main.c     **** 	// Habilita int. vectorizadas y la linea IRQ (FIQ no) mediante INTCON
  98:../main.c     **** 	rINTCON = 0x1;
 1987              		.loc 1 98 0
 1988 007c 1E36A0E3 		mov	r3, #31457280
 1989 0080 0120A0E3 		mov	r2, #1
 1990 0084 002083E5 		str	r2, [r3, #0]
  99:../main.c     **** 
 100:../main.c     **** 	// Enmascara todas las lineas excepto el bit global (INTMSK)
 101:../main.c     **** 	rINTMSK = ~( BIT_GLOBAL );
 1991              		.loc 1 101 0
 1992 0088 34309FE5 		ldr	r3, .L6+8
 1993 008c 0123E0E3 		mvn	r2, #67108864
 1994 0090 002083E5 		str	r2, [r3, #0]
 102:../main.c     **** 
 103:../main.c     **** 	//Iniciamos los distintos componentes
 104:../main.c     **** 	Eint4567_init();
 1995              		.loc 1 104 0
 1996 0094 FEFFFFEB 		bl	Eint4567_init
 105:../main.c     **** 	keyboard_init();
 1997              		.loc 1 105 0
 1998 0098 FEFFFFEB 		bl	keyboard_init
 106:../main.c     **** 
 107:../main.c     **** 
 108:../main.c     **** 	//Apagamos todos los leds y 8 segmentos
 109:../main.c     **** 	leds_off();
 1999              		.loc 1 109 0
 2000 009c FEFFFFEB 		bl	leds_off
 110:../main.c     **** 	D8Led_init();
 2001              		.loc 1 110 0
 2002 00a0 FEFFFFEB 		bl	D8Led_init
 111:../main.c     **** 
 112:../main.c     **** 	/* Por precaucion, se vuelven a borrar los bits de INTPND y EXTINTPND */
 113:../main.c     **** 	rI_ISPC = 0x3ffffff;
 2003              		.loc 1 113 0
 2004 00a4 10309FE5 		ldr	r3, .L6
 2005 00a8 3F23E0E3 		mvn	r2, #-67108864
 2006 00ac 002083E5 		str	r2, [r3, #0]
 114:../main.c     **** }
 2007              		.loc 1 114 0
 2008 00b0 0CD04BE2 		sub	sp, fp, #12
 2009 00b4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2010 00b8 1EFF2FE1 		bx	lr
 2011              	.L7:
 2012              		.align	2
 2013              	.L6:
 2014 00bc 2400E001 		.word	31457316
 2015 00c0 0800E001 		.word	31457288
 2016 00c4 0C00E001 		.word	31457292
 2017              		.cfi_endproc
 2018              	.LFE1:
 2020              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\USUARI~1\AppData\Local\Temp\ccGZKS46.s:1892   .data:00000000 str_send
C:\Users\USUARI~1\AppData\Local\Temp\ccGZKS46.s:1889   .data:00000000 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccGZKS46.s:1898   .data:0000000c str_error
                            *COM*:00000100 str
C:\Users\USUARI~1\AppData\Local\Temp\ccGZKS46.s:1903   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccGZKS46.s:1906   .text:00000000 Main
C:\Users\USUARI~1\AppData\Local\Temp\ccGZKS46.s:1962   .text:00000058 initPractica
C:\Users\USUARI~1\AppData\Local\Temp\ccGZKS46.s:1953   .text:0000004c $d
C:\Users\USUARI~1\AppData\Local\Temp\ccGZKS46.s:1959   .text:00000058 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccGZKS46.s:2014   .text:000000bc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sys_init
Uart0_Init
Uart1_Init
Uart_Config
Eint4567_activar
keyboard_activar
key
Eint4567_init
keyboard_init
leds_off
D8Led_init
